procedure -> test_program, test_main;			// declare procedures 'test_program' and 'test_main'

test_program := (set -> set_1, set -> set_2), 	// define procedure blocks
	set -> union;
	union := unite -> (set_1, set_2);			// unite 'set_1' and 'set_2'
	set_idtf -> (union, 'union');

    return -> (union);							// return union
    ;

test_main := (),
    set -> set_1, set_2;
    terminal -> el_1, el_2, el_3;
    set_2 := (el_1, (el_2, {}), el_3);			// create set where on elements is a set

    set_idtf -> (el_1, 'terminal_1');			// set elements and sets system identifiers
    set_idtf -> (el_2, 'terminal_2');			// string literal usages
    set_idtf -> (el_3, 'terminal_3');
    set_idtf -> (set_2, 'set_2');

    set_2 := test_program -> (set_1, set_2);	// call procedure

	dump -> (set_2);							// print 'set_2' identifier

	if -> [el_1 -> <child>],					// if 'el_1' child is found by template,
		dump -> (el_1),							// then complete post-condition - print child identifier,
	elif ->										// else if set elements child is found,
	  	[
			set_2 -> <child>,
			<child> -> <leaf>
		],
		dump -> (leaf);							// then print set elements child identifier
	endif;
	;

test_main -> ();								// call test_main without params
set -> set_3;
set_3 := resolve_idtf -> ('set_3');				// resolve element with system identifier 'set_3'
dump -> (set_3);;								// print 'set_3' identifier
